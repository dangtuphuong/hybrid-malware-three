import { useLocation } from "react-router-dom";
import { PieChart } from '@mui/x-charts/PieChart';
import { BarChart } from '@mui/x-charts/BarChart';
import { DataGrid } from '@mui/x-data-grid';
import Paper from '@mui/material/Paper';
import { useEffect, useState } from "react";
import JSZip from 'jszip';

const AnalysePage = () => {
    const location = useLocation();
    const [distribution,setDistribution] = useState([])
    const [description, setDesciption] = useState(null);
    const [img, setImg] = useState([]);
    const data = location.state;
    const descriptionCols = [
        { field: 'id', headerName: 'ID', width: 70 },
        { field: 'feature', headerName: 'Features', width: 250, valueGetter: (value, row) => `${row['feature']}`},
        { field: '25', headerName: '25%', width: 150, valueGetter: (value, row) => `${row['25%']}` },
        { field: '50', headerName: '50%', width: 150, valueGetter: (value, row) => `${row['50%']}` },
        { field: '75', headerName: '75%', width: 150, valueGetter: (value, row) => `${row['75%']}`},
        { field: 'max', headerName: 'Max', width: 150, valueGetter: (value, row) => `${row['max']}`},
        { field: 'min', headerName: 'Min', width: 150, valueGetter: (value, row) => `${row['min']}`},
        { field: 'mean', headerName: 'Mean', width: 150, valueGetter: (value, row) => `${row['mean']}`},
        { field: 'std', headerName: 'std', width: 150, valueGetter: (value, row) => `${row['std']}`},
      ];
    
    const extractZip = async () => {
        const extractedImages = [];
        const zip = new JSZip();
        const content = await zip.loadAsync(data?.imgContent);
        for (const filename in content.files) {
            const fileData = await content.files[filename].async('blob');

            // Create a URL for each image to display it in <img> tag
            const imageUrl = URL.createObjectURL(fileData);
            extractedImages.push(imageUrl);
        }

        setImg(extractedImages);
    }

    useEffect(() => {
        if (data?.distribution) {
            const dataDis = []
            const dis = data?.distribution;
            let id = 0;
            for (const att in dis) {
                dataDis.push({
                    id,
                    value: dis[att],
                    label: att
                });
                id++;
            }
            setDistribution(dataDis);
        }
        setDesciption(JSON.parse(data?.description))
        extractZip()
    }, [data])
    
    const getDescriptionRows = () => {
        const rows = [];
        let id = 0;
        for (const feature in description) {
            rows.push({
                id,
                feature,
                '25%': description[feature]['25%'],
                '50%': description[feature]['50%'],
                '75%': description[feature]['75%'],
                'max': description[feature]['max'],
                'min': description[feature]['min'],
                'mean': description[feature]['mean'],
                'std': description[feature]['std'],
            });
            id++;
        }
        return rows;
    }

    return (
        <div style={{
            margin: 'auto',
            marginTop: '100px'
        }}>
            <div style={{ margin: 'auto', padding: '30px', width: 'fit-content', borderStyle: 'solid', borderWidth: '1px', borderRadius: '10px'}}>
                <p style={{ paddingLeft: '30px', fontWeight: 'bold'}} >1. Overall training</p>
                <div style={{ padding: '20px' }}>
                    <p style={{ margin: 'auto', fontWeight: '600', textAlign: 'center'}}>Final training:</p>
                    <p style={{ margin: 'auto', fontWeight: '600', textAlign: 'center'}}>Accuracy: {data.epoches[data.epoches.length - 1].accuracy * 100}</p>
                    <p style={{ margin: 'auto', fontWeight: '600', textAlign: 'center'}}>Loss: {data.epoches[data.epoches.length - 1].loss}</p>
                    <p style={{ margin: 'auto', fontWeight: '600', textAlign: 'center'}}>Val Accuracy: {data.epoches[data.epoches.length - 1].val_accuracy}</p>
                    <p style={{ margin: 'auto', fontWeight: '600', textAlign: 'center'}}>Val Loss: {data.epoches[data.epoches.length - 1].val_loss}</p>
                </div>
                <BarChart
                    width={1000}
                    height={500}
                    series={[
                        { data: data?.epoches.map(epoch => epoch.accuracy), label: 'Accuracy', id: 'accuracy' },
                        { data: data?.epoches.map(epoch => epoch.loss), label: 'Loss', id: 'loss' },
                        { data: data?.epoches.map(epoch => epoch.val_accuracy), label: 'Val Accuracy', id: 'val_accuracy' },
                        { data: data?.epoches.map(epoch => epoch.val_loss), label: 'Val Loss', id: 'val_loss' },
                    ]}
                    xAxis={[{ data: data?.epoches.map(epoch => 'Epoch ' + (epoch.epoch + 1)), scaleType: 'band' }]}
                />
            </div>
            <div style={{ margin: 'auto', marginTop:'20px', padding: '30px', width: 'fit-content', borderStyle: 'solid', borderWidth: '1px', borderRadius: '10px'}}>
                <p style={{ paddingLeft: '30px', fontWeight: 'bold'}} >2. Label Distribution</p>
                <PieChart
                    series={[
                        {
                            data: distribution,
                        },
                    ]}
                    width={400}
                    height={200}
                    slotProps={{
                        legend: { hidden: true },
                    }}
                />
            </div>
            <div style={{ margin: 'auto', marginTop:'20px', padding: '30px', width: 'fit-content', borderStyle: 'solid', borderWidth: '1px', borderRadius: '10px'}}>
                <p style={{ paddingLeft: '30px', fontWeight: 'bold'}} >3. Feature Correlation Matrix</p>
                <img
                    src={`${img[0]}`}
                    alt={`Correlation`}
                />
            </div>
            <div style={{ margin: 'auto', marginTop:'20px', padding: '30px', width: 'fit-content', borderStyle: 'solid', borderWidth: '1px', borderRadius: '10px'}}>
                <p style={{ paddingLeft: '30px', fontWeight: 'bold'}} >4. Top 20 Best Correlation Features</p>
                <img
                    src={`${img[1]}`}
                    alt={`Top 20 Correlation`}
                />
            </div>
            <div style={{ margin: 'auto', marginTop:'20px', padding: '30px', width: 'fit-content', borderStyle: 'solid', borderWidth: '1px', borderRadius: '10px'}}>
                <p style={{ paddingLeft: '30px', fontWeight: 'bold'}} >5. Features description table</p>
                <Paper sx={{ height: 500, width: '100%' }}>
                    <DataGrid
                        rows={getDescriptionRows()}
                        getRowId={(row) => row.id}
                        columns={descriptionCols}
                        initialState={{ pagination: { page: 0, pageSize: 10 } }}
                        pageSizeOptions={[10]}
                        checkboxSelection
                        sx={{ border: 0 }}
                    />
                </Paper>
            </div>
        </div>
    )
}

export default AnalysePage;