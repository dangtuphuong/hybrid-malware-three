import axios from "axios";
import AuthService from "./auth-service";

const API_URL = "http://localhost:5000/api";

const getReport = async (params) => {
  try {
    const res = await axios.get(API_URL + "/report", { params });

    if (res?.status !== 200) {
      console.log(res.data.error);
    }
    return res?.data;
  } catch (error) {
    console.error("Error:", error);
  }
};

const trainData = async (file, label) => {
  try {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('label', label);
    formData.append('user', AuthService.getCurrentUser().id)

    const res = await axios.post(API_URL + "/cnn/train", formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      }
    })
      .catch(error => {
        console.error("Error:", error);
      });
    
    formData.append('model', res.data.modelID)

    const imgRes = await axios.post(API_URL + '/analyse', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
      responseType: 'blob'
    });
    
    const data = res?.data;

    if (imgRes) {
      data['imgContent'] = imgRes.data;
    }

    return data;

  } catch (error) {
    console.error("Error:", error);
  }
}

const predictData = async (file, label, modelID) => {
  try {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('label', label);
    formData.append('id', modelID);

    const res = await axios.post(API_URL + "/cnn/predict", formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      }
    })
      .catch(error => {
        console.error("Error:", error);
      });
    
    const data = res?.data;

    return data;

  } catch (error) {
    console.error("Error:", error);
  }
}

const getModels = async (setModels) => {
  try {
    const res = await axios.get(API_URL + '/models', { 
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    });
    setModels(res.data)
  } catch (err) {
    console.error("Error: " + err)
  }
}

const getModel = async (id) => {
  try {
    const res = await axios.post(API_URL + '/model/data', {
      id
    }, {
      headers: {
        'Content-Type': 'application/json'
      }
    });

    const imgRes = await axios.post(API_URL + '/model/image', {
      id
    }, {
      headers: {
        'Content-Type': 'application/json'
      },
      responseType: 'blob'
    });

    const data = res?.data;

    if (imgRes) {
      data['imgContent'] = imgRes.data;
    }

    data['distribution'] = JSON.parse(data['distribution']);

    return data;
  } catch (err) {
    console.error("Error: " + err)
  }
}

const deleteModel = async (id) => {
  try {
    axios.post(API_URL + '/model/delete', {
      id
    }, { 
      headers:  {
        'Content-Type': 'application/json'
      },
    })
      .then(() => ({ isError: false }))
      .catch(() => ({ isError: true}))
  } catch (err) {
    return { isError: true }
  }
}

const compareModels = async (file, label, modelID) => {
  try {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('label', label);
    formData.append('id1', modelID[0]);
    formData.append('id2', modelID[1]);

    const res = await axios.post(API_URL + "/compare", formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      }
    })
      .catch(error => {
        console.error("Error:", error);
      });
    
    const data = res?.data;

    return data;

  } catch (error) {
    console.error("Error:", error);
  }
}

const DataService = { getReport, trainData, getModels, getModel, predictData, deleteModel, compareModels };

export default DataService;
